$breakpoints:
    sm $breakpointSm $containerSm,
    md $breakpointMd $containerMd,
    lg $breakpointLg $containerLg;

@mixin grid-col-common($gap) {
    padding-right: $gap * .5;
    padding-left: $gap * .5;
    flex-grow: 0;
    flex-shrink: 0;
}

.container {
    margin-right: auto;
    margin-left: auto;
    max-width: $containerLg;
    padding-left: $gapWidth * .5;
    padding-right: $gapWidth * .5;
    @include min(sm) {
        width: $containerSm;
    }
    @include min(md) {
        width: $containerMd;
    }
    @include min(lg) {
        width: $containerLg;
    }
}

.container-fluid {
    margin-right: auto;
    margin-left: auto;
    padding-left: $gapWidth * .5;
    padding-right: $gapWidth * .5;
}

.columns,
form.horizontal .form-element {
    margin-right: $gapWidth * .5 * -1;
    margin-left: $gapWidth * .5 * -1;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    &.reverse {
        flex-direction: row-reverse;
    }
    &.center {
        align-items: center;
        justify-content: center;
    }
    &.center-v {
        align-items: center;
    }
    &.center-h {
        justify-content: center;
    }
    @each $breakpoint in $breakpoints {
        $name: nth($breakpoint, 1);
        [class^='#{$name}'],
        [class*=' #{$name}'] {
            max-width: 100%;
            padding-right: $gapWidth * .5;
            padding-left: $gapWidth * .5;
            flex-basis: 100%;
        }
    }
    &.gapMd {
        margin-right: $gapWidthMd * .5 * -1;
        margin-left: $gapWidthMd * .5 * -1;
        @each $breakpoint in $breakpoints {
            $name: nth($breakpoint, 1);
            [class^='#{$name}'],
            [class*=' #{$name}'] {
                padding-right: $gapWidthMd * .5;
                padding-left: $gapWidthMd * .5;
            }
        }
    }
    &.gapSm {
        margin-right: $gapWidthSm * .5 * -1;
        margin-left: $gapWidthSm * .5 * -1;
        @each $breakpoint in $breakpoints {
            $name: nth($breakpoint, 1);
            [class^='#{$name}'],
            [class*=' #{$name}'] {
                padding-right: $gapWidthSm * .5;
                padding-left: $gapWidthSm * .5;
            }
        }
    }
    $name: xs;
    .#{$name} {
        @include grid-col-common($gapWidth);
        flex-basis: auto;
    }
    @for $i from 1 through $columns {
        .#{$name}-#{$i} {
            max-width: 100% / $columns * $i;
            @include grid-col-common($gapWidth);
            flex-basis: 100% / $columns * $i;
        }
    }
    @for $i from 0 through $columns {
        .#{$name}-offset-#{$i} {
            @include grid-col-common($gapWidth);
            @if $i == 0 {
                margin-left: 0;
            } @else {
                margin-left: 100% / $columns * $i;
            }
        }
    }
    .#{$name} {
        max-width: 100%;
        flex-grow: 1;
        flex-basis: 0;
    }
    .start-#{$name} {
        text-align: left;
        justify-content: flex-start;
    }
    .center-#{$name} {
        text-align: center;
        justify-content: center;
    }
    .end-#{$name} {
        text-align: right;
        justify-content: flex-end;
    }
    .top-#{$name} {
        align-items: flex-start;
    }
    .middle-#{$name} {
        align-items: center;
    }
    .bottom-#{$name} {
        align-items: flex-end;
    }
    .around-#{$name} {
        justify-content: space-around;
    }
    .between-#{$name} {
        justify-content: space-between;
    }
    .first-#{$name} {
        order: -1;
    }
    .last-#{$name} {
        order: 1;
    }
    @each $breakpoint in $breakpoints {
        $name: nth($breakpoint, 1);
        $size: nth($breakpoint, 2);
        $container: nth($breakpoint, 3);
        @media only screen and (min-width: $size) {
            .#{$name} {
                @include grid-col-common($gapWidth);
                flex-basis: auto;
            }
            @for $i from 1 through $columns {
                .#{$name}-#{$i} {
                    max-width: 100% / $columns * $i;
                    @include grid-col-common($gapWidth);
                    flex-basis: 100% / $columns * $i;
                }
            }
            @for $i from 0 through $columns {
                .#{$name}-offset-#{$i} {
                    @include grid-col-common($gapWidth);
                    @if $i == 0 {
                        margin-left: 0;
                    } @else {
                        margin-left: 100% / $columns * $i;
                    }
                }
            }
            .#{$name} {
                max-width: 100%;
                flex-grow: 1;
                flex-basis: 0;
            }
            .start-#{$name} {
                text-align: left;
                justify-content: flex-start;
            }
            .center-#{$name} {
                text-align: center;
                justify-content: center;
            }
            .end-#{$name} {
                text-align: right;
                justify-content: flex-end;
            }
            .top-#{$name} {
                align-items: flex-start;
            }
            .middle-#{$name} {
                align-items: center;
            }
            .bottom-#{$name} {
                align-items: flex-end;
            }
            .around-#{$name} {
                justify-content: space-around;
            }
            .between-#{$name} {
                justify-content: space-between;
            }
            .first-#{$name} {
                order: -1;
            }
            .last-#{$name} {
                order: 1;
            }
        }
    }
}
